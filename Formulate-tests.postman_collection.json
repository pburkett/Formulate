{
	"info": {
		"_postman_id": "e462cd9b-2877-4b2b-8f02-cbc2c90c4376",
		"name": "Formulate-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Verify User 1 Tokens and IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const bearer1 = pm.collectionVariables.get(\"auth1\")\r",
									"const auth1id = pm.collectionVariables.get(\"auth1ID\")\r",
									"let res = pm.response.json();\r",
									"\r",
									"pm.test(\"User Account 1 Got/Created, and userID variable matches\", ()=>{\r",
									"   if (res.id !== auth1id){\r",
									"        postman.setNextRequest(null)\r",
									"   }\r",
									"        pm.expect(typeof res).to.be.eql('object', 'Get Account by Id did not return an object')\r",
									"        pm.expect(res.id).to.be.eql(auth1id, 'Get Account by Id did not return proper object. Check your tokens and IDs to continue testing!')\r",
									"        pm.variables.set(\"userId1\", res.id)\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"// const bearer2 = pm.collectionVariables.get(\"auth2\")\r",
									"// const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"// const getRequest1 = {\r",
									"//   url: endpoint + '/api/account',\r",
									"//   method: 'Get',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'Authorization': \"Bearer \" + bearer1\r",
									"//   },\r",
									"//   body: {\r",
									"//   }\r",
									"// };\r",
									"// const getRequest2 = {\r",
									"//   url: endpoint + '/api/account',\r",
									"//   method: 'Get',\r",
									"//   header: {\r",
									"//     'Content-Type': 'application/json',\r",
									"//     'Authorization': \"Bearer \" + bearer2\r",
									"//   },\r",
									"//   body: {\r",
									"//   }\r",
									"// };\r",
									"\r",
									"\r",
									"// pm.test(\"User Account 2 Got/Created, and userID variable matches\", ()=>{\r",
									"//     pm.sendRequest(getRequest2, function (err, response) {\r",
									"//         let res = response.json()\r",
									"//         pm.expect(typeof res).to.be.eql('object', 'Get Account by Id did not return an object')\r",
									"//         pm.expect(res.id).to.be.eql(auth2id, 'Get Account by Id did not return proper object')\r",
									"//         pm.variables.set(\"userId2\", res.id)\r",
									"//     });\r",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/accounts",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify User 2 Tokens and IDs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const bearer = pm.collectionVariables.get(\"auth2\")\r",
									"const authid = pm.collectionVariables.get(\"auth2ID\")\r",
									"let res = pm.response.json();\r",
									"\r",
									"pm.test(\"User Account 2 Got/Created, and userID variable matches\", ()=>{\r",
									"    if (res.id !== authid){\r",
									"        postman.setNextRequest(null)\r",
									"   }\r",
									"    // pm.sendRequest(getRequest1, function (err, response) {\r",
									"        pm.expect(typeof res).to.be.eql('object', 'Get Account by Id did not return an object')\r",
									"        pm.expect(res.id).to.be.eql(authid, 'Get Account by Id did not return proper object. Check your tokens and IDs to continue testing!')\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/accounts",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify User 3 Tokens and IDs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const bearer = pm.collectionVariables.get(\"auth3\")\r",
									"const authid = pm.collectionVariables.get(\"auth3ID\")\r",
									"let res = pm.response.json();\r",
									"\r",
									"pm.test(\"User Account 2 Got/Created, and userID variable matches\", ()=>{\r",
									"    if (res.id !== authid){\r",
									"        postman.setNextRequest(null)\r",
									"   }\r",
									"    // pm.sendRequest(getRequest1, function (err, response) {\r",
									"        pm.expect(typeof res).to.be.eql('object', 'Get Account by Id did not return an object')\r",
									"        pm.expect(res.id).to.be.eql(authid, 'Get Account by Id did not return proper object. Check your tokens and IDs to continue testing!')\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth3}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/accounts",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthenticated User can Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"const authid = pm.collectionVariables.get(\"auth1ID\")\r",
									"\r",
									"pm.test('Returns correct profile with the correct properties', () =>{\r",
									"    pm.expect(res.id).to.be.eql(authid)\r",
									"    pm.expect(typeof res.email).to.be.eql('string')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/accounts/{{auth1ID}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"accounts",
								"{{auth1ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dough Shapes",
			"item": [
				{
					"name": "Create Minimum Valid Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"\r",
									"pm.test(\"Returns an Object\", ()=>{\r",
									"    pm.expect(res).to.be.an('object')\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Dough Shape has Proper inputed and defaulted Values\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.doughWeight).to.be.eql(500)\r",
									"    pm.expect(res.public).to.be.eql(false)\r",
									"})\r",
									"    var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"       \"doughWeight\",\r",
									"       \"public\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"doughWeight\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"public\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"        \r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"pm.test('Dough Shape Model is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name\",\r\n        \"doughWeight\":500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/doughshapes",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Maximum Valid Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"\r",
									"pm.test(\"Returns an Object\", ()=>{\r",
									"    pm.expect(res).to.be.an('object')\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Dough Shape has Proper inputed and defaulted Values\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.doughWeight).to.be.eql(500)\r",
									"    pm.expect(res.public).to.be.eql(false)\r",
									"    pm.expect(res.description).to.be.eql('Test Description')\r",
									"    pm.expect(res.pan).to.be.eql('medium-loaf')\r",
									"})\r",
									"console.log(res)\r",
									"    var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"       \"doughWeight\",\r",
									"       \"public\",\r",
									"       \"pan\",\r",
									"       \"description\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"doughWeight\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"description\":{\r",
									"            \"type\":\"string\"\r",
									"        },\r",
									"        \"pan\":{\r",
									"            \"type\":\"string\"\r",
									"        },\r",
									"        \"public\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"        \r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"pm.test('Dough Shape Model is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name\",\r\n        \"doughWeight\":500,\r\n        \"description\":\"Test Description\",\r\n        \"pan\":\"medium-loaf\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/doughshapes",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthenticated User Can Get Public Dough Shapes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"doughWeight\":501,\r",
									"            \"public\":true\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"var schema ={\r",
									"\"type\":\"array\",\r",
									"\"items\":\r",
									" {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"doughWeight\",\r",
									"        \"public\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"doughWeight\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"        \"public\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }},\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"pm.test('Dough Shape Model is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/public",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"public"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthenticated User Can Get Public Dough Shape by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \r",
									"        \"name\": \"Test Name\",\r",
									"        \"doughWeight\":502,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\",\r",
									"        \"public\":true\r",
									"\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns the correct public formula\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.doughWeight).to.be.eql(502)\r",
									"    pm.expect(res.public).to.be.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creator of Dough Shape can get Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \r",
									"        \"name\": \"Test Name\",\r",
									"        \"doughWeight\":503,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\"\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns the correct public formula\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.doughWeight).to.be.eql(503)\r",
									"    pm.expect(res.public).to.be.eql(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized User cannot get Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \r",
									"        \"name\": \"Test Name\",\r",
									"        \"doughWeight\":503,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\"\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 401\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(401)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorized User Can get Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"\r",
									"const postBody = `{ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"doughWeight\":504,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\",\r",
									"        \"permissions\":{\r",
									"            \"canUse\": [{\"userId\": \"${auth2id}\"}]\r",
									"        }\r",
									"  }`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"   body:{mode: \"raw\",\r",
									"      raw: postBody}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns the correct public dough shape\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.doughWeight).to.be.eql(504)\r",
									"    pm.expect(res.public).to.be.eql(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Can Get Own Dough Shapes by Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"const postRequest1 = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"   body:{mode: \"raw\",\r",
									"      raw: `{ \r",
									"        \"name\": \"Test Name 1\",\r",
									"        \"doughWeight\":400,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\"\r",
									"  }`\r",
									"  }\r",
									"};\r",
									"\r",
									"const postRequest2 = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"   body:{mode: \"raw\",\r",
									"      raw: `{ \r",
									"        \"name\": \"Test Name 2\",\r",
									"        \"doughWeight\":400,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\"\r",
									"  }`}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape 1\", ()=>{\r",
									"    pm.sendRequest(postRequest1, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name 1')\r",
									"    });\r",
									"})\r",
									"pm.test(\"Post Dough Shape 2\", ()=>{\r",
									"    pm.sendRequest(postRequest2, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name 2')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns the posted dough shapes\", ()=>{\r",
									"    let found =res.find(d => d.name === \"Test Name 1\")\r",
									"    pm.expect(typeof found).to.be.eql('object')\r",
									"    found = res.find(d => d.name === \"Test Name 2\")\r",
									"    pm.expect(typeof found).to.be.eql('object')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/accounts/{{auth1ID}}/doughshapes",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"accounts",
								"{{auth1ID}}",
								"doughshapes"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Can Get  Public Dough Shapes by Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"const postRequest1 = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"   body:{mode: \"raw\",\r",
									"      raw: `{ \r",
									"        \"name\": \"Test Name PUBLIC\",\r",
									"        \"doughWeight\":400,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\",\r",
									"        \"public\":true\r",
									"          }`\r",
									"  }\r",
									"};\r",
									"\r",
									"const postRequest2 = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"   body:{mode: \"raw\",\r",
									"      raw: `{ \r",
									"        \"name\": \"Test Name PRIVATE\",\r",
									"        \"doughWeight\":400,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\"\r",
									"  }`}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape 1\", ()=>{\r",
									"    pm.sendRequest(postRequest1, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name PUBLIC')\r",
									"    });\r",
									"})\r",
									"pm.test(\"Post Dough Shape 2\", ()=>{\r",
									"    pm.sendRequest(postRequest2, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name PRIVATE')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns the posted dough shapes\", ()=>{\r",
									"    let found = res.find(d => d.name === \"Test Name PUBLIC\")\r",
									"    console.log(found)\r",
									"    pm.expect(typeof found).to.be.eql('object')\r",
									"    found = res.find(d => d.name === \"Test Name PRIVATE\")\r",
									"    pm.expect(typeof found).to.be.eql('undefined')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/accounts/{{auth1ID}}/doughshapes",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"accounts",
								"{{auth1ID}}",
								"doughshapes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creator of Dough Shape can edit Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \r",
									"        \"name\": \"Test Name\",\r",
									"        \"doughWeight\":500,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\"\r",
									"  })}\r",
									"};\r",
									"// For post to work the account from Auth0 must have a profile within the database\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Dough shape has correct properties\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name PUT')\r",
									"    pm.expect(res.description).to.be.eql('Test Description PUT')\r",
									"    pm.expect(res.doughWeight).to.be.eql(505)\r",
									"    pm.expect(res.public).to.be.eql(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name PUT\",\r\n        \"doughWeight\":505,\r\n        \"description\":\"Test Description PUT\",\r\n        \"pan\":\"medium-loaf\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorized User Can Edit Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"\r",
									"const postBody = `{\r",
									"        \"name\": \"Test Name\",\r",
									"        \"doughWeight\":500,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\",\r",
									"        \"permissions\":{\r",
									"            \"canEdit\":{\"userId\":\"${auth2id}\"}\r",
									"\r",
									"        }\r",
									"}`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: postBody\r",
									"      }\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Dough shape has correct properties\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name PUT')\r",
									"    pm.expect(res.description).to.be.eql('Test Description PUT')\r",
									"    pm.expect(res.doughWeight).to.be.eql(505)\r",
									"    pm.expect(res.public).to.be.eql(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name PUT\",\r\n        \"doughWeight\":505,\r\n        \"description\":\"Test Description PUT\",\r\n        \"pan\":\"medium-loaf\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dough Shape Values Must be Correct Types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"\r",
									"const postBody = `{\r",
									"        \"name\": 10,\r",
									"        \"doughWeight\":500,\r",
									"        \"description\":true,\r",
									"        \"pan\":\"medium-loaf\",\r",
									"        \"permissions\":{\r",
									"            \"canEdit\":{\"userId\":\"${auth2id}\"}\r",
									"        }\r",
									"}`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: postBody\r",
									"      }\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(400)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name PUT\",\r\n        \"doughWeight\":\"505\",\r\n        \"description\":\"Test Description PUT\",\r\n        \"pan\":\"medium-loaf\",\r\n        \"public\":20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unuthorized User Cannot Edit Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"const postBody = `{\r",
									"        \"name\": \"Test Name PUT\",\r",
									"        \"doughWeight\":505,\r",
									"        \"description\":\"Test Description PUT\",\r",
									"        \"pan\":\"medium-loaf\",\r",
									"        \"permissions\":{\r",
									"            \"canUse\":{\"userId\":\"${auth2id}\"}\r",
									"\r",
									"        }\r",
									"}`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: postBody\r",
									"      }\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(401)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creator of Dough Shape can Delete Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \r",
									"        \"name\": \"Test Name\",\r",
									"        \"doughWeight\":500,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\"\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Dough shape is returned, one last time\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.description).to.be.eql('Test Description')\r",
									"    pm.expect(res.doughWeight).to.be.eql(500)\r",
									"    pm.expect(res.public).to.be.eql(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorized User Can Delete Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"\r",
									"const postBody = `{ \"name\": \"Test Name\",\r",
									"        \"doughWeight\":500,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\",\r",
									"        \"permissions\":{\r",
									"            \"canEditPerms\":[{\"userId\":\"${auth2id}\"}]\r",
									"        }\r",
									"\r",
									"}`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: postBody}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Dough shape is returned, one last time\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.description).to.be.eql('Test Description')\r",
									"    pm.expect(res.doughWeight).to.be.eql(500)\r",
									"    pm.expect(res.public).to.be.eql(false)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unuthorized User Cannot Delete Dough Shape",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"\r",
									"const postBody = `{ \"name\": \"Test Name\",\r",
									"        \"doughWeight\":500,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\",\r",
									"        \"permissions\":{\r",
									"            \"canEdit\":[{\"userId\":\"${auth2id}\"}]\r",
									"        }\r",
									"\r",
									"}`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/doughshapes',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: postBody}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Dough Shape as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Dough Shape was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(401)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/doughshapes/{{doughShapeId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"doughshapes",
								"{{doughShapeId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Formulas",
			"item": [
				{
					"name": "Create Valid Formula",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"const getRequest = {\r",
									"  url: endpoint + '/api/account',\r",
									"  method: 'Get',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"  }\r",
									"};\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"\r",
									"pm.test(\"Returns an Object\", ()=>{\r",
									"    pm.expect(res).to.be.an('object')\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Formula has Proper inputed Values\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.ingredientList[0].name).to.be.eql('water')\r",
									"})\r",
									"console.log(res)\r",
									"    var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"ingredientList\",\r",
									"        \"flourList\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"flourList\": {\"type\":\"array\", \"items\": [\r",
									"            {\"type\":\"object\",\r",
									"            \"properties\":{\r",
									"                \"name\":{\"type\":\"string\"},\r",
									"                \"percentage\":{\"type\":\"number\"}\r",
									"                }}],\r",
									"        \"ingredientList\":{\"type\":\"array\",\"items\": [\r",
									"            {\"type\":\"object\",\r",
									"            \"properties\":{\r",
									"                \"name\":{\"type\":\"string\"},\r",
									"                \"percentage\":{\"type\":\"number\"}\r",
									"                }}],\r",
									"    }}},\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"pm.test('Formula Model is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name\",\r\n        \"flourList\":\r\n            [{\r\n                \"name\":\"flour\",\r\n                \"percentage\":20\r\n            },{\r\n                \"name\":\"flour other\",\r\n                \"percentage\":80\r\n            }],\r\n            \"ingredientList\":\r\n            [{\r\n                \"name\":\"water\",\r\n                \"percentage\":65\r\n            }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/formulas",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cannot Create Invalid Formula",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"\r",
									"pm.test(\"status code should be 406\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(406)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name\",\r\n        \"flourList\":\r\n            [{\r\n                \"name\":\"flour\",\r\n                \"percentage\":10\r\n            },{\r\n                \"name\":\"flour other\",\r\n                \"percentage\":80\r\n            }],\r\n            \"ingredientList\":\r\n            [{\r\n                \"name\":\"water\",\r\n                \"percentage\":65\r\n            }]\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/formulas",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthenticated User Can Get Public Formula",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":21\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":79\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":64\r",
									"            }],\r",
									"            \"public\":true\r",
									"  })}\r",
									"};\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns an array of public formulas\", ()=>{\r",
									"    \r",
									"    pm.expect(res[0].public).to.be.eql(true)\r",
									"    pm.expect(typeof res[0].name).to.be.eql('string')\r",
									"    pm.expect(typeof res[0].ingredientList[0].percentage).to.be.eql('number')\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/formulas/public",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"public"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthenticated User Can Get Public Formula by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }],\r",
									"            \"public\":true\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.variables.get(\"formulaId\");\r",
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns the public formula\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.ingredientList[0].name).to.be.eql('water')\r",
									"    pm.expect(res.public).to.be.eql(true)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creator of Formula Can Get Formula",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }]\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Formula has Proper inputed Values\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.ingredientList[0].name).to.be.eql('water')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Un-authorized Users Cannot Use Formulas",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }]\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        \r",
									"        console.log(res)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.variables.get(\"formulaId\");\r",
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 401\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(401)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorized Users Can Use Formulas",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"const postBody = `{\r",
									"      \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }],\r",
									"            \"permissions\":{\r",
									"                \"canUse\":[{\"userId\":\"${auth2id}\" }]\r",
									"            }\r",
									"  }`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body:{mode: \"raw\",\r",
									"      raw: postBody}\r",
									"}\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.variables.get(\"formulaId\");\r",
									"\r",
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"pm.test(\"Formula has Proper inputed Values\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.ingredientList[0].name).to.be.eql('water')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Can Get Own Formulas by Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"const postRequest1 = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"   body:{mode: \"raw\",\r",
									"      raw: `{ \r",
									"        \"name\": \"Test Name 1\",\r",
									"        \"doughWeight\":400,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\"\r",
									"  }`\r",
									"  }\r",
									"};\r",
									"\r",
									"const postRequest2 = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"   body:{mode: \"raw\",\r",
									"      raw: `{ \r",
									"        \"name\": \"Test Name 2\",\r",
									"        \"doughWeight\":400,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\"\r",
									"  }`}\r",
									"};\r",
									"\r",
									"pm.test(\"Post formula 1\", ()=>{\r",
									"    pm.sendRequest(postRequest1, function (err, response) {\r",
									"        let res = response.json()\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name 1')\r",
									"    });\r",
									"})\r",
									"pm.test(\"Post formula 2\", ()=>{\r",
									"    pm.sendRequest(postRequest2, function (err, response) {\r",
									"        let res = response.json()\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name 2')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns the correct public dough shape\", ()=>{\r",
									"    pm.expect(res).to.include({ \r",
									"        \"name\": \"Test Name 2\",\r",
									"        \"doughWeight\":400,\r",
									"        \"description\":\"Test Description\",\r",
									"        \"pan\":\"medium-loaf\",\r",
									"  })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/profiles/{{auth1ID}}/formulas",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"profiles",
								"{{auth1ID}}",
								"formulas"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Can Get Own Formulas by Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"const postRequest1 = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name 1\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":21\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":79\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":64\r",
									"            }]\r",
									"              })}\r",
									"};\r",
									"\r",
									"const postRequest2 = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name 2\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":21\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":79\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":64\r",
									"            }]\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post formula 1\", ()=>{\r",
									"    pm.sendRequest(postRequest1, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name 1')\r",
									"    });\r",
									"})\r",
									"pm.test(\"Post formula 2\", ()=>{\r",
									"    pm.sendRequest(postRequest2, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name 2')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns the posted Formulas\", ()=>{\r",
									"    let found =res.find(d => d.name === \"Test Name 1\")\r",
									"    pm.expect(typeof found).to.be.eql('object')\r",
									"    found = res.find(d => d.name === \"Test Name 2\")\r",
									"    pm.expect(typeof found).to.be.eql('object')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/accounts/{{auth1ID}}/formulas",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"accounts",
								"{{auth1ID}}",
								"formulas"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Can Get Public Formulas by Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"const postRequest1 = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name 1\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":21\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":79\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":64\r",
									"            }],\r",
									"            \"public\":\"true\"\r",
									"              })}\r",
									"};\r",
									"\r",
									"const postRequest2 = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name 2\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":21\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":79\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":64\r",
									"            }]\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post formula 1\", ()=>{\r",
									"    pm.sendRequest(postRequest1, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name 1')\r",
									"    });\r",
									"})\r",
									"pm.test(\"Post formula 2\", ()=>{\r",
									"    pm.sendRequest(postRequest2, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"doughShapeId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"         pm.expect(res.name).to.be.eql('Test Name 2')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Returns the posted Formulas\", ()=>{\r",
									"    let found =res.find(d => d.name === \"Test Name 1\")\r",
									"    pm.expect(typeof found).to.be.eql('object')\r",
									"    found = res.find(d => d.name === \"Test Name 2\")\r",
									"    pm.expect(typeof found).to.be.eql('undefined')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/accounts/{{auth1ID}}/formulas",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"accounts",
								"{{auth1ID}}",
								"formulas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creator of Formula Can Edit Formula",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }]\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Formula has Proper inputed Values\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name PUT')\r",
									"    pm.expect(res.ingredientList[0].name).to.be.eql('water PUT')\r",
									"    pm.expect(res.flourList[0].percentage).to.be.eql(30)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name PUT\",\r\n        \"flourList\":\r\n            [{\r\n                \"name\":\"flour PUT\",\r\n                \"percentage\":30\r\n            },{\r\n                \"name\":\"flour other PUT\",\r\n                \"percentage\":70\r\n            }],\r\n            \"ingredientList\":\r\n            [{\r\n                \"name\":\"water PUT\",\r\n                \"percentage\":65\r\n            }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorized User Can Edit Formula",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"const postBody =`{ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }],\r",
									"            \"permissions\":{\"canEdit\":[{\"userId\":\"${auth2id}\"}]}\r",
									"  }`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: postBody}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name PUT\",\r\n        \"flourList\":\r\n            [{\r\n                \"name\":\"flour PUT\",\r\n                \"percentage\":30\r\n            },{\r\n                \"name\":\"flour other PUT\",\r\n                \"percentage\":70\r\n            }],\r\n            \"ingredientList\":\r\n            [{\r\n                \"name\":\"water PUT\",\r\n                \"percentage\":65\r\n            }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Formula Values get Rejected on Edit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }]\r",
									"  })}\r",
									"};\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 406\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(406)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name PUT\",\r\n        \"flourList\":\r\n            [{\r\n                \"name\":\"flour PUT\",\r\n                \"percentage\":20\r\n            },{\r\n                \"name\":\"flour other PUT\",\r\n                \"percentage\":70\r\n            }],\r\n            \"ingredientList\":\r\n            [{\r\n                \"name\":\"water PUT\",\r\n                \"percentage\":65\r\n            }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized User Cannot Edit Formula",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }]\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 401\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(401)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Test Name PUT\",\r\n        \"flourList\":\r\n            [{\r\n                \"name\":\"flour PUT\",\r\n                \"percentage\":30\r\n            },{\r\n                \"name\":\"flour other PUT\",\r\n                \"percentage\":70\r\n            }],\r\n            \"ingredientList\":\r\n            [{\r\n                \"name\":\"water PUT\",\r\n                \"percentage\":65\r\n            }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creator of Formula Can Delete it",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"\r",
									"\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"  body: {\r",
									"      mode: \"raw\",\r",
									"      raw: JSON.stringify({ \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }]\r",
									"  })}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Deleted formula is returned, one last time\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.ingredientList[0].name).to.be.eql('water')\r",
									"    pm.expect(res.flourList[0].percentage).to.be.eql(20)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorized User Can Delete Formula",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"\r",
									"const postBody = `{\r",
									"      \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }],\r",
									"            \"permissions\":{\r",
									"                \"canEditPerms\":[{\"userId\":\"${auth2id}\" }]\r",
									"            }\r",
									"  }`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"    body:{mode: \"raw\",\r",
									"      raw: postBody}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 200\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(200)\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Deleted formula is returned, one last time\", ()=>{\r",
									"    pm.expect(res.name).to.be.eql('Test Name')\r",
									"    pm.expect(res.ingredientList[0].name).to.be.eql('water')\r",
									"    pm.expect(res.flourList[0].percentage).to.be.eql(20)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized User Cannot Delete Formula Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const endpoint = pm.collectionVariables.get(\"endpoint\")\r",
									"const bearer = pm.collectionVariables.get(\"auth1\")\r",
									"const auth2id = pm.collectionVariables.get(\"auth2ID\")\r",
									"\r",
									"\r",
									"\r",
									"const postBody = `{\r",
									"      \r",
									"        \"name\": \"Test Name\",\r",
									"        \"flourList\":\r",
									"            [{\r",
									"                \"name\":\"flour\",\r",
									"                \"percentage\":20\r",
									"            },{\r",
									"                \"name\":\"flour other\",\r",
									"                \"percentage\":80\r",
									"            }],\r",
									"            \"ingredientList\":\r",
									"            [{\r",
									"                \"name\":\"water\",\r",
									"                \"percentage\":65\r",
									"            }],\r",
									"            \"permissions\":{\r",
									"                \"canEdit\":[{\"userId\":\"${auth2id}\" }]\r",
									"            }\r",
									"  }`\r",
									"const postRequest = {\r",
									"  url: endpoint + '/api/formulas',\r",
									"  method: 'Post',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': \"Bearer \" + bearer\r",
									"  },\r",
									"    body:{mode: \"raw\",\r",
									"      raw: postBody}\r",
									"};\r",
									"\r",
									"pm.test(\"Post Formula as User 1\", ()=>{\r",
									"    pm.sendRequest(postRequest, function (err, response) {\r",
									"        let res = response.json()\r",
									"        pm.variables.set(\"formulaId\", res._id)\r",
									"        console.log(res._id)\r",
									"         pm.expect(typeof res).to.be.eql('object', 'Formula was not an object')\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();\r",
									"pm.test(\"status code should be 401\", ()=>{\r",
									"    pm.expect(pm.response.code).to.be.eql(401)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/formulas/{{formulaId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"formulas",
								"{{formulaId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "endpoint",
			"value": "http://localhost:3000"
		},
		{
			"key": "auth1",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlVDSnd6ZWc0Nnc3T1FhMmV0VU1HSyJ9.eyJpc3MiOiJodHRwczovL2Rldi1qeHZmdjRrcy51cy5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NjAzMDg3ZTg0YTdjNjMwMDY4OGNjMzRmIiwiYXVkIjpbImh0dHBzOi8vZ2VuZXJpYyIsImh0dHBzOi8vZGV2LWp4dmZ2NGtzLnVzLmF1dGgwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2MTYwOTgxMTksImV4cCI6MTYxNjE4NDUxOSwiYXpwIjoidThaU1g1UklTdmxnN2hEamtrTHNzOVFyRUZvMEJYMDQiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIn0.LXYaP00jba4jCATLyJXeFTDae1gfFBRWaMmz3_9u7algakWYzyv0JO2Ej55J-B0PlEg7WD1vJQrXK6C-tts-Gbf0ZnANrSGuu4lIv9SRrzv-BsKtc0sfQ0EeUm2fZCz-T7rg_Zc4x-1B3iTt5qP0_1xzJ_Df6tl_pbpeEJ71_mqUp9UT4eQpt3Bky7EzCxr4Dusey_mokVLFnE8UEZCW5A_qjo-OwYC2u216ixyaNw4t_XYyUf3SKvpmKuT-84NUfrOtlVtXRbjsZrL-0f2JVi4oO6Mx7xGNOvLEtIzonifxxzcU4Mpw7lJJCOeRu0faog8FY2UR96LZny4V_GwnjQ"
		},
		{
			"key": "auth1ID",
			"value": "3a12a148-cdf1-4f9c-9779-3f8a1a352462"
		},
		{
			"key": "auth2",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlVDSnd6ZWc0Nnc3T1FhMmV0VU1HSyJ9.eyJpc3MiOiJodHRwczovL2Rldi1qeHZmdjRrcy51cy5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NjA1M2IzZGQ4OTVkYTAwMDY3YTM4YTM5IiwiYXVkIjpbImh0dHBzOi8vZ2VuZXJpYyIsImh0dHBzOi8vZGV2LWp4dmZ2NGtzLnVzLmF1dGgwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2MTYxMDI5MzIsImV4cCI6MTYxNjE4OTMzMiwiYXpwIjoidThaU1g1UklTdmxnN2hEamtrTHNzOVFyRUZvMEJYMDQiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIn0.R9p-78EvGeUvUz7kH3LiidbXVgmO-6Hr1DdfkPmS1W5e32ILLf9Z15SBwFNdyMzENftetPUG073FOgIvtK4kf6dZ836HnjxUfDqxv5FrfOYoR-ve_inTKFcd1aFcLiqBknt88N16W34-tIyhTX7zzMs7NKZmq4533u_-7YP64dNQbkRNmKHV9xAOC5Ed6uGYHGRp7FkYV7vgVCONNs0t_Ayj4cj2GDHwGH8qrZOYiFEZS_cYX94alyLNYcTiC7W3ibN0vgwxHSJLFdfMWgw3t15pc3dvZsFeZgu_tkUGiZfTdVn7ioFo7k61ZpOh1qGinFZlCxNZnUej1rFsqiMzlg"
		},
		{
			"key": "auth2ID",
			"value": "7d662fd1-ef7b-4fd7-b41c-dba61ee0112d"
		},
		{
			"key": "auth3",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlVDSnd6ZWc0Nnc3T1FhMmV0VU1HSyJ9.eyJpc3MiOiJodHRwczovL2Rldi1qeHZmdjRrcy51cy5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NjAzOTQzMGZhOWE2NGYwMDY5MWY1MzRkIiwiYXVkIjpbImh0dHBzOi8vZ2VuZXJpYyIsImh0dHBzOi8vZGV2LWp4dmZ2NGtzLnVzLmF1dGgwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2MTYxMDQ4NjcsImV4cCI6MTYxNjE5MTI2NywiYXpwIjoidThaU1g1UklTdmxnN2hEamtrTHNzOVFyRUZvMEJYMDQiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIn0.QYQM8UIuAQ7-qc3euaOxJuksZr7dU2SMjj1xg-T1D6V9vATJbf7nppgjbxisrbWMxo8P6Mc3I-xJ35k8Cu_JogCmpDF4UB5efz--sQDiNjfqz-hBhfIgmmtKja2dNKm0yRTpfqNs0ceFhK_xgTHdvfevzN1K_90OV2kvV7zMu4Brv9W7SW9FZjpnVHiywDGN3x6S5j373P4pWYCelP1XwMzYvT4Eyoz80FlXd-Vvmrj9m_vu4zPJTaJSYQvEwYPwIN9FwxPX5jHl6n3WJpafAUjORGoNoFj0MzitZFR4DzGEIqi54NGgp1Zn6jBHToeR8BS6CRKvvIpZeZzpHrf80Q"
		},
		{
			"key": "auth3ID",
			"value": "b2b37292-86c1-4d41-aad8-cd5db6ff51ec"
		}
	]
}